<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlunoRAObrigatorio" xml:space="preserve">
    <value>RA precisa estar preenchido</value>
  </data>
  <data name="AtualizadoSucesso" xml:space="preserve">
    <value>Atualizado com sucesso</value>
  </data>
  <data name="CadastradoSucesso" xml:space="preserve">
    <value>Cadastrado com sucesso</value>
  </data>
  <data name="CPFJaExiste" xml:space="preserve">
    <value>CPF já existente</value>
  </data>
  <data name="CursoDescricaoObrigatorio" xml:space="preserve">
    <value>Descrição precisa estar preenchida</value>
  </data>
  <data name="CursoDescricaoTamanho" xml:space="preserve">
    <value>Descrição pode ter no máximo {0} caracteres</value>
  </data>
  <data name="CursoJaExiste" xml:space="preserve">
    <value>Curso já existente</value>
  </data>
  <data name="CursoNaoEncontrado" xml:space="preserve">
    <value>Curso não encontrado</value>
  </data>
  <data name="CursoNaoPermitido" xml:space="preserve">
    <value>Você não é Administrador desse curso</value>
  </data>
  <data name="CursoNomeObrigatorio" xml:space="preserve">
    <value>Nome precisa estar preenchido</value>
  </data>
  <data name="CursoNomeTamanho" xml:space="preserve">
    <value>Nome precisa estar entre {0} e {1} caracteres</value>
  </data>
  <data name="CursoSiglaObrigatorio" xml:space="preserve">
    <value>Sigla precisa estar preenchida</value>
  </data>
  <data name="CursoSiglaTamanho" xml:space="preserve">
    <value>Sigla pode ter no máximo {0} caracteres</value>
  </data>
  <data name="DadosInvalidos" xml:space="preserve">
    <value>Dados inválidos</value>
  </data>
  <data name="DeletadoSucesso" xml:space="preserve">
    <value>Deletado com sucesso</value>
  </data>
  <data name="ErroInternoServidor" xml:space="preserve">
    <value>Ops, ocorreu um erro no sistema!</value>
  </data>
  <data name="FalhaAtualizar" xml:space="preserve">
    <value>Falha ao atualizar</value>
  </data>
  <data name="FalhaCadastrar" xml:space="preserve">
    <value>Falha ao cadastrar</value>
  </data>
  <data name="FalhaDeletar" xml:space="preserve">
    <value>Falha ao deletar</value>
  </data>
  <data name="IdObrigatorio" xml:space="preserve">
    <value>ID precisa estar preenchido</value>
  </data>
  <data name="InstituicaoDescricaoObrigatorio" xml:space="preserve">
    <value>Descrição precisa estar preenchida</value>
  </data>
  <data name="InstituicaoDescricaoTamanho" xml:space="preserve">
    <value>Descrição pode ter no máximo {0} caracteres</value>
  </data>
  <data name="InstituicaoJaExiste" xml:space="preserve">
    <value>Instituição já existente</value>
  </data>
  <data name="InstituicaoNaoEncontrada" xml:space="preserve">
    <value>Instituição não encontrada</value>
  </data>
  <data name="InstituicaoNaoPermitida" xml:space="preserve">
    <value>Você não é Administrador dessa instituição</value>
  </data>
  <data name="InstituicaoNomeObrigatorio" xml:space="preserve">
    <value>Nome precisa estar preenchido</value>
  </data>
  <data name="InstituicaoNomeTamanho" xml:space="preserve">
    <value>Nome precisa estar entre {0} e {1} caracteres</value>
  </data>
  <data name="NaoEncontrado" xml:space="preserve">
    <value>Registro não encontrado</value>
  </data>
  <data name="PessoaCelularInvalido" xml:space="preserve">
    <value>Celular não é válido</value>
  </data>
  <data name="PessoaCPFInvalido" xml:space="preserve">
    <value>CPF não é válido</value>
  </data>
  <data name="PessoaDataNascimentoInvalida" xml:space="preserve">
    <value>Data Nascimento precisa ser menor que hoje</value>
  </data>
  <data name="PessoaGeneroObrigatorio" xml:space="preserve">
    <value>Gênero precisa ser informado</value>
  </data>
  <data name="PessoaImagemObrigatoria" xml:space="preserve">
    <value>Imagem precisa estar preenchida</value>
  </data>
  <data name="PessoaNickNameInvalido" xml:space="preserve">
    <value>NickName somente deve conter letras, números, traço(_), hífen(-) e ponto(.)</value>
  </data>
  <data name="PessoaNickNameObrigatorio" xml:space="preserve">
    <value>NickName precisa estar preenchido</value>
  </data>
  <data name="PessoaNickNameTamanhoMaximo" xml:space="preserve">
    <value>NickName pode ter no máximo {0} caracteres</value>
  </data>
  <data name="PessoaNomeObrigatorio" xml:space="preserve">
    <value>Nome precisa estar preenchido</value>
  </data>
  <data name="PessoaNomePrecisaSobrenome" xml:space="preserve">
    <value>Nome precisa de um sobrenome</value>
  </data>
  <data name="PessoaNomeTamanho" xml:space="preserve">
    <value>Nome precisa estar entre {0} e {1} caracteres</value>
  </data>
  <data name="PessoaTipoPessoaInvalido" xml:space="preserve">
    <value>Tipo de pessoa precisa ser Admin, Professor ou Aluno</value>
  </data>
  <data name="ProfessorCPFObrigatorio" xml:space="preserve">
    <value>CPF precisa estar preenchido</value>
  </data>
  <data name="UsuarioConfirmacaoSenhaNaoConfere" xml:space="preserve">
    <value>Senha e confirmação de senha não coincidem</value>
  </data>
  <data name="UsuarioConfirmacaoSenhaObrigatoria" xml:space="preserve">
    <value>Confirmação de senha precisa estar preenchida</value>
  </data>
  <data name="UsuarioContaBloqueada" xml:space="preserve">
    <value>Sua conta está bloqueada</value>
  </data>
  <data name="UsuarioEmailConfirmarFalha" xml:space="preserve">
    <value>E-mail não pode ser confirmado</value>
  </data>
  <data name="UsuarioEmailConfirmarSucesso" xml:space="preserve">
    <value>E-mail confirmado com sucesso</value>
  </data>
  <data name="UsuarioEmailInvalido" xml:space="preserve">
    <value>E-mail não é válido</value>
  </data>
  <data name="UsuarioEmailJaExiste" xml:space="preserve">
    <value>E-mail já existente</value>
  </data>
  <data name="UsuarioEmailNaoConfirmado" xml:space="preserve">
    <value>E-mail não está confirmado</value>
  </data>
  <data name="UsuarioEmailObrigatorio" xml:space="preserve">
    <value>E-mail precisa estar preenchido</value>
  </data>
  <data name="UsuarioEmailTamanhoMaximo" xml:space="preserve">
    <value>E-mail pode ter no máximo {0} caracteres</value>
  </data>
  <data name="UsuarioLoginFalha" xml:space="preserve">
    <value>Usuário e/ou senha inválidos</value>
  </data>
  <data name="UsuarioLoginSucesso" xml:space="preserve">
    <value>Login feito com sucesso</value>
  </data>
  <data name="UsuarioLogoutSucesso" xml:space="preserve">
    <value>Logout feito com sucesso</value>
  </data>
  <data name="UsuarioSenhaObrigatoria" xml:space="preserve">
    <value>Senha precisa estar preenchida</value>
  </data>
  <data name="UsuarioSenhaRequerDigito" xml:space="preserve">
    <value>Senha precisa no mínimo de um dígito</value>
  </data>
  <data name="UsuarioSenhaRequerEspecial" xml:space="preserve">
    <value>Senha precisa no mínimo de um caractere especial</value>
  </data>
  <data name="UsuarioSenhaRequerMaiusculo" xml:space="preserve">
    <value>Senha precisa no mínimo de uma letra maiúscula</value>
  </data>
  <data name="UsuarioSenhaRequerMinusculo" xml:space="preserve">
    <value>Senha precisa no mínimo de uma letra minúscula</value>
  </data>
  <data name="UsuarioSenhaTamanho" xml:space="preserve">
    <value>Senha precisa estar entre {0} e {1} caracteres</value>
  </data>
</root>